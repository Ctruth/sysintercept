<?xml version="1.0"?>

<xs:schema 
 xmlns:tns="https://github.com/limyreth/sysintercept" 
 xmlns:xs="http://www.w3.org/2001/XMLSchema" 
 elementFormDefault="qualified" 
 targetNamespace="https://github.com/limyreth/sysintercept">
	
	<xs:element name="sysintercept-config" type="tns:Config"/>
	
	<xs:complexType name="Config">
		<xs:annotation><xs:documentation>
			The root element
		</xs:documentation></xs:annotation>
		
		<xs:all> <!-- elements occur in any order, min=0, max=1 -->
			<xs:element name="filesystem" type="tns:Filesystem"/>
		</xs:all>
	</xs:complexType>
	
	<xs:complexType name="Filesystem">
		<xs:annotation><xs:documentation>
			Filesystem related intercept behaviour
		</xs:documentation></xs:annotation>
		
		<xs:all>
			<xs:element name="path" type="tns:Path"/>
		</xs:all>
	</xs:complexType>
	
	<xs:complexType name="Path">
		<xs:annotation><xs:documentation>
			Filesystem path related intercept behaviour
		</xs:documentation></xs:annotation>
		
		<xs:sequence>
			<xs:element name="replacement" type="tns:Replacement" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	
	<xs:complexType name="Replacement">
		<xs:annotation><xs:documentation>
			Path replacement rule. 
			Sysintercept will apply the regex substitution to any paths in file IO. 
			All matching parts are replaced by replacement, other parts are simply copied.
			When multiple rules match, they are applied in order.
		</xs:documentation></xs:annotation>
	
    <xs:sequence>
      <xs:element name="from" minOccurs="1" maxOccurs="1" type="tns:ReplacementFrom"/>
      <xs:element name="to" minOccurs="1" maxOccurs="1" type="tns:ReplacementTo"/>
    </xs:sequence>
	</xs:complexType>

  <xs:complexType name="ReplacementFrom">
    <xs:simpleContent>
      <xs:annotation><xs:documentation>
        What to replace
      </xs:documentation></xs:annotation>
      
      <xs:extension base="xs:string">
        <xs:attribute name="format" use="required" type="tns:ReplacementFromFormat"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  
  <xs:simpleType name="ReplacementFromFormat">
    <xs:annotation><xs:documentation>
      match format used: 

      - regex formats: perl, posix-extended or posix-basic

      - literal format: literal.
    
      Details: http://www.boost.org/doc/libs/1_49_0/libs/regex/doc/html/boost_regex/syntax.html
    </xs:documentation></xs:annotation>
          
    <xs:restriction base="xs:string">
      <xs:enumeration value="perl"/>
      <xs:enumeration value="posix-extended"/>
      <xs:enumeration value="posix-basic"/>
      <xs:enumeration value="literal"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="ReplacementTo">
    <xs:simpleContent>
      <xs:annotation><xs:documentation>
        What to replace it by
      </xs:documentation></xs:annotation>
      
      <xs:extension base="xs:string">
        <xs:attribute name="format" type="tns:ReplacementToFormat" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  
  <xs:simpleType name="ReplacementToFormat">
    <xs:annotation><xs:documentation>
      replacement string format: 

      - regex based formats: sed, perl or boost-extended

      - literal format: literal

      Details: http://www.boost.org/doc/libs/1_49_0/libs/regex/doc/html/boost_regex/format.html
    </xs:documentation></xs:annotation>
    
    <xs:restriction base="xs:string">
      <xs:enumeration value="sed"/>
      <xs:enumeration value="perl"/>
      <xs:enumeration value="boost-extended"/>
      <xs:enumeration value="literal"/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>